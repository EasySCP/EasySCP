<?php
/**
 * EasySCP a Virtual Hosting Control Panel
 * Copyright (C) 2010-2019 by Easy Server Control Panel - http://www.easyscp.net
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 *
 * @link 		http://www.easyscp.net
 * @author 		EasySCP Team
 */

require '../../include/easyscp-lib.php';

check_login(__FILE__);

$cfg = EasySCP_Registry::get('Config');

$tpl = EasySCP_TemplateEngine::getInstance();
$template = 'admin/easyscp_debugger.tpl';

if (isset($_GET['action'])) {
	if ($_GET['action'] == 'run_engine') {
		$code = send_request('100 CORE checkAll');
		if ($code != 'Ok'){
			set_page_message($code, 'error');
		} else {
			set_page_message(tr('Execute requests'), 'success');
		}
	}
}

$exec_count = count_requests('domain');

$exec_count = $exec_count + count_requests('domain_aliasses');

$exec_count = $exec_count + count_requests('subdomain');

$exec_count = $exec_count + count_requests('subdomain_alias');

$exec_count = $exec_count + count_requests('mail_users');
$exec_count = $exec_count + count_requests('htaccess');
$exec_count = $exec_count + count_requests('htaccess_groups');
$exec_count = $exec_count + count_requests('htaccess_users');

$errors = get_error_domains($tpl);
$errors += get_error_aliases($tpl);
$errors += get_error_subdomains($tpl);
$errors += get_error_alias_subdomains($tpl);
$errors += get_error_mails($tpl);
$errors += get_error_htaccess($tpl);

// static page messages
$tpl->assign(
	array(
		'TR_PAGE_TITLE'			=> tr('EasySCP - Virtual Hosting Control System'),
		'TR_DEBUGGER_TITLE'		=> tr('EasySCP debugger'),
		'TR_DOMAIN'				=> tr('Domains'),
		'TR_ALIAS'				=> tr('Domain alias'),
		'TR_SUBDOMAIN'			=> tr('Subdomains'),
		'TR_SUBDOMAIN_ALIAS'	=> tr('Subdomain alias'),
		'TR_MAIL'				=> tr('Mail accounts'),
		'TR_HTACCESS'			=> tr('.htaccess related errors'),
		'TR_DAEMON_TOOLS'		=> tr('EasySCP Daemon tools'),
		'TR_EXEC_REQUESTS'		=> tr('Execute requests'),
		'EXEC_COUNT'			=> $exec_count,
		'TR_ERRORS'				=> tr('%s Errors in database', $errors)
	)
);

gen_admin_mainmenu($tpl, 'admin/main_menu_system_tools.tpl');
gen_admin_menu($tpl, 'admin/menu_system_tools.tpl');

gen_page_message($tpl);

if ($cfg->DUMP_GUI_DEBUG) {
	dump_gui_debug($tpl);
}

$tpl->display($template);

unset_messages();

/**
 * Returns the number of requests that still to run
 *
 * @param  EasySCP_Database $sql EasySCP_Database instance
 * @param  string $statusField status database field name
 * @param  string $tableName EasySCP database table name
 * @return int Number of request
 */
function count_requests($tableName) {

	$cfg = EasySCP_Registry::get('Config');

	$sql_query = "
		SELECT
			status
		FROM
			$tableName
		WHERE
			status
		IN (
				'$cfg->ITEM_ADD_STATUS',
				'$cfg->ITEM_CHANGE_STATUS',
				'$cfg->ITEM_DELETE_STATUS',
				'$cfg->ITEM_RESTORE_STATUS',
				'$cfg->ITEM_TOENABLE_STATUS',
				'$cfg->ITEM_TODISABLED_STATUS',
				'$cfg->ITEM_DNSCHANGE_STATUS'
			);
	";

	return DB::query($sql_query)->rowCount();
}

/**
 * Get domain errors generated by a engine request
 *
 * @param  EasySCP_TemplateEngine $tpl EasySCP_TemplateEngine instance
 * @return int Number of errors
 */
function get_error_domains($tpl) {

	$cfg = EasySCP_Registry::get('Config');

	$sql_query = "
		SELECT
			domain_name, status, domain_id
		FROM
			domain
		WHERE
			status <> '$cfg->ITEM_OK_STATUS';
	";

	$rs = DB::query($sql_query);

	$errors = 0;

	if ($rs->rowCount() == 0) {
		$tpl->assign(
			array(
				'TR_DOMAIN_MESSAGE' => tr('No domain system errors')
			)
		);
	} else {
		while($row = $rs->fetch()){
			//TODO Check auf status_msg einbauen
			//if ($row['domain_name']){$errors++;}
			$tpl->append(
				array(
					'TR_DOMAIN_NAME'	=> tohtml($row['domain_name']),
					'TR_DOMAIN_ERROR'	=> tohtml($row['status'])
				)
			);
		}
	}

	return $errors;
}

/**
 * Get domain aliases errors generated by a engine request
 *
 * @param  EasySCP_TemplateEngine $tpl EasySCP_TemplateEngine instance
 * @return int Number of errors
 */
function get_error_aliases($tpl) {

	$cfg = EasySCP_Registry::get('Config');

	$sql_query = "
		SELECT
			alias_name, status, alias_id
		FROM
			domain_aliasses
		WHERE
			status <> '$cfg->ITEM_OK_STATUS';
		;
	";

	$rs = DB::query($sql_query);

	$errors = 0;

	if ($rs->rowCount() == 0) {
		$tpl->assign(
			array(
				'TR_ALIAS_MESSAGE' => tr('No domain alias system errors')
			)
		);

	} else {
		while($row = $rs->fetch()){
			$tpl->append(
				array(
					'TR_ALIAS_NAME'		=> tohtml($row['alias_name']),
					'TR_ALIAS_ERROR'	=> tohtml($row['status'])
				)
			);
		}
	}

	return $errors;
}

/**
 * Get subdomains errors generated by a engine request
 *
 * @param  EasySCP_TemplateEngine $tpl EasySCP_TemplateEngine instance
 * @return int Number of errors
 */
function get_error_subdomains($tpl) {

	$cfg = EasySCP_Registry::get('Config');

	$sql_query = "
		SELECT
			d.domain_name, s.subdomain_name, s.status, s.subdomain_id
		FROM
			domain d,
			subdomain s
		WHERE
			d.domain_id = s.domain_id
		AND
			s.status <> '$cfg->ITEM_OK_STATUS';
	";

	$rs = DB::query($sql_query);

	$errors = 0;

	if ($rs->rowCount() == 0) {
		$tpl->assign(
			array(
				'TR_SUBDOMAIN_MESSAGE' => tr('No subdomain system errors')
			)
		);

	} else {
		while($row = $rs->fetch()){
			//TODO Check auf status_msg einbauen
			//if ($row['subdomain_name']){$errors++;}
			$tpl->append(
				array(
					'TR_SUBDOMAIN_NAME'		=> tohtml($row['subdomain_name']).'.'.tohtml($row['domain_name']),
					'TR_SUBDOMAIN_ERROR'	=> tohtml($row['status'])
				)
			);
		}
	}
	return $errors;
}

/**
 * Get domains aliases errors generated by a engine request
 *
 * @param  EasySCP_TemplateEngine $tpl EasySCP_TemplateEngine instance
 * @return int Number of errors
 */
function get_error_alias_subdomains($tpl) {

	$cfg = EasySCP_Registry::get('Config');

	$sql_query = "
		SELECT
			a.alias_name, s.subdomain_alias_name, s.status, s.subdomain_alias_id
		FROM
			domain_aliasses a,
			subdomain_alias s
		WHERE
			s.status <> '$cfg->ITEM_OK_STATUS';
		;
	";

	$rs = DB::query($sql_query);

	$errors = 0;

	if ($rs->rowCount() == 0) {
		$tpl->assign(
			array(
				'TR_SUBDOMAIN_ALIAS_MESSAGE' => tr('No alias subdomain system errors')
			)
		);

	} else {
		while($row = $rs->fetch()){
			$tpl->append(
				array(
					'TR_SUBDOMAIN_ALIAS_NAME'	=> tohtml($row['subdomain_alias_name']).'.'.tohtml($row['alias_name']),
					'TR_SUBDOMAIN_ALIAS_ERROR'	=> tohtml($row['status'])
				)
			);
		}
	}
	return $errors;
}

/**
 * Get mails errors generated by a engine request
 *
 * @param EasySCP_TemplateEngine $tpl EasySCP_TemplateEngine instance
 * @throws EasySCP_Exception
 * @return int Number of errors
 */
function get_error_mails($tpl) {

	$cfg = EasySCP_Registry::get('Config');
	$sql = EasySCP_Registry::get('Db');

	$sql_query = "
		SELECT
			mail_acc, domain_id, mail_type, status, mail_id
		FROM
			mail_users
		WHERE
			status <> '$cfg->ITEM_OK_STATUS';
	";

	$rs = DB::query($sql_query);

	$errors = 0;

	if ($rs->rowCount() == 0) {
		$tpl->assign(
			array(
				'TR_MAIL_MESSAGE' => tr('No email account system errors')
			)
		);

	} else {
		while($row = $rs->fetch()){
			$searched_id	= $row['domain_id'];
			$mail_acc		= $row['mail_acc'];
			$mail_type		= $row['mail_type'];
			$mail_id		= $row['mail_id'];
			$mail_status	= $row['status'];

			switch ($mail_type) {
				case 'normal_mail':
				case 'normal_forward':
				case 'normal_mail,normal_forward':
					$query = "
						SELECT
							CONCAT('@', `domain_name`) AS `domain_name`
						FROM
							`domain`
						WHERE
							`domain_id` = ?
						;
					";
					break;
				case 'subdom_mail':
				case 'subdom_forward':
				case 'subdom_mail,subdom_forward':
					$query = "
						SELECT
							CONCAT('@', `subdomain_name`, '.', IF(t2.`domain_name` IS NULL,'".tr('missing domain')."',t2.`domain_name`)) AS 'domain_name'
						FROM
							`subdomain` AS t1
						LEFT JOIN
							`domain` AS t2
						ON
							t1.`domain_id` = t2.`domain_id`
						WHERE
							`subdomain_id` = ?
						;
					";
					break;
				case 'alssub_mail':
				case 'alssub_forward':
				case 'alssub_mail,alssub_forward':
					$query = "
						SELECT
							CONCAT('@', t1.`subdomain_alias_name`, '.', IF(t2.`alias_name` IS NULL,'".tr('missing alias')."',t2.`alias_name`)) AS `domain_name`
						FROM
							`subdomain_alias` AS t1
						LEFT JOIN
							`domain_aliasses` AS t2
						ON
							t1.`alias_id` = t2.`alias_id`
						WHERE
							`subdomain_alias_id` = ?
						;
					";
					break;
				case 'normal_catchall':
				case 'alias_catchall':
				case 'alssub_catchall':
				case 'subdom_catchall':
					$query = "
						SELECT
							`mail_addr` AS `domain_name`
						FROM
							`mail_users`
						WHERE
							`mail_id` = ?
						;
					";
					$searched_id	= $mail_id;
					$mail_acc		= '';
					break;
				case 'alias_mail':
				case 'alias_forward':
				case 'alias_mail,alias_forward':
					$query = "
						SELECT
							CONCAT('@', `alias_name`) AS `domain_name`
						FROM
							`domain_aliasses`
						WHERE
							`alias_id` = ?
						;
					";
					break;
				default:
					write_log(
						sprintf(
							'FIXME: %s:%d' . "\n" . 'Unknown mail type %s',
							__FILE__, __LINE__, $mail_type
						)
					);

					throw new EasySCP_Exception(
						'FIXME: ' . __FILE__ . ':' . __LINE__ . ' ' . $mail_type
					);
			}

			$sr = exec_query($sql, $query, $searched_id);
			$domain_name = $sr->fields['domain_name'];

			$tpl->append(
				array(
					'TR_MAIL_NAME'	=> tohtml($mail_acc . ($domain_name == '' ? '@ ' . tr('orphan entry') : $domain_name)),
					'TR_MAIL_ERROR'	=> tohtml($mail_status)
				)
			);
		}
	}
	return $errors;
}

/**
 * Get get_error_htaccess errors generated by a daemon request
 *
 * @param EasySCP_TemplateEngine $tpl EasySCP_TemplateEngine instance
 * @return int number of errors
 */
function get_error_htaccess($tpl) {

	$cfg = EasySCP_Registry::get('Config');

	$sql_query = "
		SELECT
			`id`, `dmn_id`, h.`status`, 'htaccess' as `type`, `domain_name`
		FROM
			`htaccess` h
		LEFT JOIN
			`domain`
		ON
			`dmn_id` = `domain_id`
		WHERE
			h.`status` <> '$cfg->ITEM_OK_STATUS'
		UNION
		SELECT
			`id`, `dmn_id`, hg.`status`, 'htaccess_groups' as `type`, `domain_name`
		FROM
			`htaccess_groups` hg
		LEFT JOIN
			`domain`
		ON
			`dmn_id` = `domain_id`
		WHERE
			hg.`status` <> '$cfg->ITEM_OK_STATUS'
		UNION
		SELECT
			`id`, `dmn_id`, hu.`status`, 'htaccess_users' as `type`, `domain_name`
		FROM
			`htaccess_users` hu
		LEFT JOIN
			`domain`
		ON
			`dmn_id` = `domain_id`
		WHERE
			hu.`status` <> '$cfg->ITEM_OK_STATUS'
	";

	$rs = DB::query($sql_query);

	$errors = 0;

	if ($rs->rowCount() == 0) {
		$tpl->assign(
			array(
				'TR_HTACCESS_MESSAGE' => tr('No htaccess related system errors')
			)
		);

	} else {
		while($row = $rs->fetch()){
			$tpl->append(
				array(
					'TR_HTACCESS_TYPE'	=> $row['type'],
					'TR_HTACCESS_NAME'	=> $row['domain_name'] == null ? tr('missing domain') : tohtml($row['domain_name']),
					'TR_HTACCESS_ERROR'	=> tohtml($row['status'])
				)
			);
		}
	}

	return $errors;
}
?>