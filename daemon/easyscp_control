#!/usr/bin/php -q

<?php
/**
 * EasySCP a Virtual Hosting Control Panel
 * Copyright (C) 2010-2020 by Easy Server Control Panel - http://www.easyscp.net
 *
 * This work is licensed under the Creative Commons Attribution-NoDerivs 3.0 Unported License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nd/3.0/.
 *
 * @link 		http://www.easyscp.net
 * @author 		EasySCP Team
 */

// Allowed arguments & their defaults
$runmode = array(
    'help' => false,
);
 
// Scan command line attributes for allowed arguments
foreach ($argv as $k=>$arg) {
    if (substr($arg, 0, 2) == '--' && isset($runmode[substr($arg, 2)])) {
        $runmode[substr($arg, 2)] = true;
    }
}
 
// Help mode. Shows allowed argumentents and quit directly
if ($runmode['help'] == true) {
    echo 'Usage: '.$argv[0].' [runmode]' . "\n";
    echo 'Available runmodes:' . "\n";
    foreach ($runmode as $runmod=>$val) {
        echo ' --'.$runmod . "\n";
    }
    die();
}
 
error_reporting(E_ALL);
require_once(dirname(__FILE__).'/extlibs/Daemon.php');

// Setup
$options = array(
	'appName' => 'easyscp_control',
	'appDir' => dirname(__FILE__),
	'appDescription' => 'Controller for EasySCP',
	'authorName' => 'EasySCP Team',
	'authorEmail' => 'team@easyscp.net',
	'sysMaxExecutionTime' => '0',
	'sysMaxInputTime' => '0',
	'sysMemoryLimit' => '1024M',
	'usePEAR' => false,
	'appRunAsGID' => 0, // Maybe this should be changed later
	'appRunAsUID' => 0, // Maybe this should be changed later
	'logLocation' => '/var/log/easyscp/easyscp_control.log'
);

System_Daemon::setOptions($options);
require_once(dirname(__FILE__).'/DaemonCommon.php');
require_once(dirname(__FILE__).'/DaemonConfig.php');
require_once(dirname(__FILE__).'/DaemonMaps.php');
require_once(dirname(__FILE__).'/SocketHandler.php');

if (DaemonConfig::$cfg->{'DEBUG'} == '1'){
	// Default: 6
	$options['logVerbosity'] = 7;
} else {
	// Default: 6
	$options['logVerbosity'] = 6;
}	
 
System_Daemon::setOptions($options);
System_Daemon::start();

try {
	SocketHandler::$File = DaemonConfig::$cfg->{'SOCK_EASYSCPC'};
	SocketHandler::Create();
	SocketHandler::Bind();
	SocketHandler::Listen();
	SocketHandler::Block(false);
	$runningOkay = true;
}
catch(ErrorException $e){
	echo $e->getMessage() . "\n";
	$runningOkay = false;
}
catch(Exception $e){
	echo $e->getMessage() . "\n";
	$runningOkay = false;
}

while (!System_Daemon::isDying() && $runningOkay) {
		
	$runningOkay = true;

	if (isset($ApacheRestart)){
		if ($ApacheRestart > 0){
			$ApacheRestart--;
		} else {
			System_Daemon::info('Running "ApacheRestart" subprocess.');

			switch (DaemonConfig::$cfg->DistName) {
				case 'CentOS':
					System_Daemon::info('CentOS');
					exec('/bin/systemctl restart httpd.service 1>&1 2>&1', $result, $error);
					break;
				default:
					System_Daemon::info('default');
					exec('service apache2 reload 1>&1 2>&1', $result, $error);
			}

			unset($ApacheRestart);

			System_Daemon::info('Finished "ApacheRestart" subprocess.');
		}
	}

	if (isset($PHPfpmRestart)){
		if ($PHPfpmRestart > 0){
			$PHPfpmRestart--;
		} else {
			System_Daemon::info('Running "PHPfpmRestart" subprocess.');

			switch (DaemonConfig::$cfg->DistName) {
				case 'CentOS':
					// reload PHP-FPM if available
					if (DaemonConfig::$php !== null) {
						foreach(DaemonConfig::$php->PHP_Entry as $PHP_Entry) {
							if (isset($PHP_Entry->SRV_PHP) && isset($PHP_Entry->ENABLE) && $PHP_Entry->ENABLE->__toString() == '1') {
								exec('/bin/systemctl stop ' . $PHP_Entry->SRV_PHP->__toString() . '.service 1>&1 2>&1', $result, $error);
							}
						}
						// wait 1s
						sleep(1);
						foreach(DaemonConfig::$php->PHP_Entry as $PHP_Entry) {
							if (isset($PHP_Entry->SRV_PHP) && isset($PHP_Entry->ENABLE) && $PHP_Entry->ENABLE->__toString() == '1') {
								exec('/bin/systemctl start ' . $PHP_Entry->SRV_PHP->__toString() . '.service 1>&1 2>&1', $result, $error);
							}
						}
					} else {
						if (isset(DaemonConfig::$cmd->{'SRV_PHP'})) {
							exec('/bin/systemctl reload ' . DaemonConfig::$cmd->{'SRV_PHP'} . '.service 1>&1 2>&1', $result, $error);
						}
					}
					break;
				default:
					// reload PHP-FPM if available
					if (DaemonConfig::$php !== null) {
						foreach(DaemonConfig::$php->PHP_Entry as $PHP_Entry) {
							if (isset($PHP_Entry->SRV_PHP) && isset($PHP_Entry->ENABLE) && $PHP_Entry->ENABLE->__toString() == '1') {
								exec('service ' . $PHP_Entry->SRV_PHP->__toString() . ' stop 1>&1 2>&1', $result, $error);
							}
						}
						// wait 1s
						sleep(1);
						foreach(DaemonConfig::$php->PHP_Entry as $PHP_Entry) {
							if (isset($PHP_Entry->SRV_PHP) && isset($PHP_Entry->ENABLE) && $PHP_Entry->ENABLE->__toString() == '1') {
								exec('service ' . $PHP_Entry->SRV_PHP->__toString() . ' start 1>&1 2>&1', $result, $error);
							}
						}
					} else {
						if (isset(DaemonConfig::$cmd->{'SRV_PHP'})) {
							exec('service ' . DaemonConfig::$cmd->{'SRV_PHP'} . ' reload 1>&1 2>&1', $result, $error);
						}
					}
				}

			unset($PHPfpmRestart);

			System_Daemon::info('Finished "PHPfpmRestart" subprocess.');
		}
	}

	if (isset($DaemonRestart)){
		if ($DaemonRestart > 0){
			$DaemonRestart--;
		} else {
			System_Daemon::info('Running "DaemonRestart" subprocess.');

			$pid = pcntl_fork();
			if($pid == -1) {
				System_Daemon::debug('Error forking...');
			} else if($pid == 0) {
				exec('service easyscp_daemon restart 1>&1 2>&1', $result, $error);

				/*
				exec('service easyscp_daemon Stop 1>&1 2>&1', $result, $error);

				if (file_exists('/var/run/easyscp_daemon/easyscp_daemon.pid')){
					$fp = @fopen('/var/run/easyscp_daemon/easyscp_daemon.pid', "r");
					$id = fread($fp, filesize('/var/run/easyscp_daemon/easyscp_daemon.pid'));
					fclose($fp);
					exec('kill ' . $id . ' 1>&1 2>&1', $result, $error);
				}

				if (file_exists('/var/run/easyscp_daemon/easyscp_daemon.pid')){
					unlink('/var/run/easyscp_daemon/easyscp_daemon.pid');
				}
				if (file_exists('/var/run/easyscp_daemon/easyscp_daemon.sock')){
					unlink('/var/run/easyscp_daemon/easyscp_daemon.sock');
				}

				exec('service easyscp_daemon start 1>&1 2>&1', $result, $error);
				*/

				exit();
				// posix_kill(getmypid(),9);
			}

			if(isset($pid) && $pid != -1 && $pid < 0){
				pcntl_waitpid($pid, $status, WNOHANG);
			}

			unset($DaemonRestart);

			System_Daemon::info('Finished "DaemonRestart" subprocess.');
		}
	}

	if ($Client = SocketHandler::Accept())
	{
		System_Daemon::info('Client connected');
		SocketHandler::Write($Client, "End with .");
		
		while ($Input = SocketHandler::Read($Client))
		{
			$Input = trim($Input);
			if ($Input != ''){
				System_Daemon::debug('Input = ' . $Input);

				switch ($Input) {

					case '.':

						break;

					case 'ApacheRestart':
						System_Daemon::info('Running "ApacheCountdown" subprocess.');

						if (isset($ApacheRestart)){
							System_Daemon::info('Reset "ApacheCountdown".');
						}

						$ApacheRestart = 15;

						System_Daemon::info('Finished "ApacheCountdown" subprocess.');
						break;
					case 'PHPfpmRestart':
						System_Daemon::info('Running "PHPfpmCountdown" subprocess.');

						if (isset($PHPfpmRestart)){
							System_Daemon::info('Reset "PHPfpmCountdown".');
						}

						$PHPfpmRestart = 15;

						System_Daemon::info('Finished "PHPfpmCountdown" subprocess.');
						break;
					case 'DaemonConfigReload':
						System_Daemon::info('Running "DaemonConfigReload" subprocess.');

						DaemonConfig::Reload();

						System_Daemon::info('Finished "DaemonConfigReload" subprocess.');
						break;
					case 'DaemonRestart':
						System_Daemon::info('Running "DaemonCountdown" subprocess.');

						if (isset($DaemonRestart)){
							System_Daemon::info('Reset "DaemonCountdown".');
						}

						$DaemonRestart = 25;

						System_Daemon::info('Finished "DaemonCountdown" subprocess.');
						break;
					case 'Stop':
						$runningOkay = false;
						System_Daemon::info('EasySCP Controller is stopping.');
						break;

					default:

				}
				System_Daemon::info('Closing connection.');
				SocketHandler::CloseClient($Client);
			}
		}
	}
	System_Daemon::iterate(0.05);
}
SocketHandler::Close();
System_Daemon::info('Shutting down.');

// Shut down the daemon nicely
System_Daemon::stop();
?>